{"mappings":"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","sources":["<anon>","src/app.js","src/helpers/submit.js","src/helpers/validation.js"],"sourcesContent":["function $76ba2b964929ae02$export$e02251cfbe407ee6() {\n    const formData = new FormData();\n    formData.append(\"name\", document.getElementById(\"name\").value);\n    formData.append(\"email\", document.getElementById(\"email\").value);\n    formData.append(\"password\", document.getElementById(\"password\").value);\n    formData.append(\"confirm\", document.getElementById(\"confirm\").value);\n    formData.append(\"rodo\", document.getElementById(\"rodo\").checked);\n    // Make the fetch request\n    fetch(\"https://przeprogramowani.pl/projekt-walidacja\", {\n        method: \"POST\",\n        body: formData\n    }).then((response)=>{\n        if (!response.ok) throw new Error(\"Network response was not ok\");\n        return response.json();\n    }).then((data)=>{\n        // Handle the response data\n        console.log(\"Form submitted successfully:\", data);\n    }).catch((error)=>{\n        // Handle errors\n        console.error(\"There was a problem with the fetch operation:\", error);\n    });\n}\n\n\nfunction $13c19e183e4c0e34$export$4d09d4ac8ba225dd(inputIds) {\n    const { name: name, email: email, password: password, confirm: confirm, rodo: rodo } = inputIds;\n    // Clear all error messages\n    $13c19e183e4c0e34$var$clearAllErrors();\n    let isNameValid = true;\n    let isEmailValid = true;\n    let isPasswordValid = true;\n    let isConfirmValid = true;\n    let isRodoValid = true;\n    // Name\n    if (name) {\n        const nameInput = document.querySelector(`#${name}`);\n        const nameValue = nameInput.value;\n        // Validate name\n        if (nameValue.length < 2) {\n            isNameValid = false;\n            $13c19e183e4c0e34$var$displayError(name, \"Name must be at least 2 characters long.\");\n        } else if (!/^[a-zA-Z]+$/.test(nameValue)) {\n            isNameValid = false;\n            $13c19e183e4c0e34$var$displayError(name, \"Name must not contain special characters or spaces.\");\n        }\n    }\n    // Email\n    if (email) {\n        const emailInput = document.querySelector(`#${email}`);\n        const emailValue = emailInput.value;\n        // Validate email\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(emailValue)) {\n            isEmailValid = false;\n            $13c19e183e4c0e34$var$displayError(email, \"Enter a valid email address.\");\n        }\n    }\n    // Password\n    if (password) {\n        const passwordInput = document.querySelector(`#${password}`);\n        const passwordValue = passwordInput.value;\n        if (passwordValue.length < 8) {\n            isPasswordValid = false;\n            $13c19e183e4c0e34$var$displayError(password, \"Password must be at least 8 characters long.\");\n        } else if (!/[A-Z]/.test(passwordValue)) {\n            isPasswordValid = false;\n            $13c19e183e4c0e34$var$displayError(password, \"Password must contain at least one uppercase letter.\");\n        } else if (!/\\d/.test(passwordValue)) {\n            isPasswordValid = false;\n            $13c19e183e4c0e34$var$displayError(password, \"Password must contain at least one digit.\");\n        } else if (!/[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\-]/.test(passwordValue)) {\n            isPasswordValid = false;\n            $13c19e183e4c0e34$var$displayError(password, \"Password must contain at least one special character.\");\n        }\n    }\n    // Confirm password\n    if (confirm) {\n        const confirmInput = document.querySelector(`#${confirm}`);\n        const confirmValue = confirmInput.value;\n        const passwordInput = document.querySelector(\"#password\");\n        const passwordValue = passwordInput.value;\n        if (confirmValue !== passwordValue) {\n            isConfirmValid = false;\n            $13c19e183e4c0e34$var$displayError(confirm, \"Confirmation must match the password.\");\n        }\n    }\n    // Rodo checkbox\n    if (rodo) {\n        const rodoCheckbox = document.querySelector(`#${rodo}`);\n        const rodoValue = rodoCheckbox.checked;\n        if (!rodoValue) {\n            isRodoValid = false;\n            $13c19e183e4c0e34$var$displayError(rodo, \"Rodo is not checked.\");\n        }\n    }\n    return isNameValid && isEmailValid && isPasswordValid && isConfirmValid && isRodoValid;\n}\nfunction $13c19e183e4c0e34$var$displayError(inputId, message) {\n    const errorContainer = document.querySelector(`#${inputId}-error`);\n    errorContainer.textContent = message;\n}\nfunction $13c19e183e4c0e34$var$clearAllErrors() {\n    const errorContainers = document.querySelectorAll(\".error\");\n    errorContainers.forEach((container)=>{\n        container.textContent = \"\";\n    });\n}\n\n\nconst $e73bf42412feb220$var$submitButton = document.querySelector(\"#submit\");\n$e73bf42412feb220$var$submitButton.addEventListener(\"click\", ()=>{\n    const isValid = (0, $13c19e183e4c0e34$export$4d09d4ac8ba225dd)({\n        name: \"name\",\n        email: \"email\",\n        password: \"password\",\n        confirm: \"confirm\",\n        rodo: \"rodo\"\n    });\n    if (!isValid) return;\n    (0, $76ba2b964929ae02$export$e02251cfbe407ee6)();\n});\n\n\n//# sourceMappingURL=index.090ab72a.js.map\n","import { submitForm } from \"./helpers/submit\"\r\nimport { validateInput } from \"./helpers/validation\"\r\n\r\nconst submitButton = document.querySelector('#submit')\r\n\r\nsubmitButton.addEventListener('click', () => {\r\n  const isValid = validateInput(\r\n    {\r\n      name: 'name',\r\n      email: 'email',\r\n      password: 'password',\r\n      confirm: 'confirm',\r\n      rodo: 'rodo'\r\n    }\r\n  )\r\n\r\n  if (!isValid) return\r\n\r\n  submitForm()\r\n})\r\n\r\n","export function submitForm() {\r\n  const formData = new FormData();\r\n\r\n  formData.append('name', document.getElementById('name').value);\r\n  formData.append('email', document.getElementById('email').value);\r\n  formData.append('password', document.getElementById('password').value);\r\n  formData.append('confirm', document.getElementById('confirm').value);\r\n  formData.append('rodo', document.getElementById('rodo').checked);\r\n\r\n  // Make the fetch request\r\n  fetch('https://przeprogramowani.pl/projekt-walidacja', {\r\n    method: 'POST',\r\n    body: formData\r\n  })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      // Handle the response data\r\n      console.log('Form submitted successfully:', data);\r\n    })\r\n    .catch(error => {\r\n      // Handle errors\r\n      console.error('There was a problem with the fetch operation:', error);\r\n    });\r\n}\r\n","export function validateInput(inputIds) {\r\n  const { name, email, password, confirm, rodo } = inputIds\r\n\r\n  // Clear all error messages\r\n  clearAllErrors();\r\n\r\n  let isNameValid = true\r\n  let isEmailValid = true\r\n  let isPasswordValid = true\r\n  let isConfirmValid = true\r\n  let isRodoValid = true\r\n\r\n  // Name\r\n  if (name) {\r\n    const nameInput = document.querySelector(`#${name}`)\r\n    const nameValue = nameInput.value\r\n\r\n    // Validate name\r\n    if (nameValue.length < 2) {\r\n      isNameValid = false\r\n      displayError(name, 'Name must be at least 2 characters long.');\r\n    } else if (!/^[a-zA-Z]+$/.test(nameValue)) {\r\n      isNameValid = false\r\n      displayError(name, 'Name must not contain special characters or spaces.');\r\n    }\r\n\r\n  }\r\n\r\n  // Email\r\n  if (email) {\r\n    const emailInput = document.querySelector(`#${email}`)\r\n    const emailValue = emailInput.value\r\n\r\n    // Validate email\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n    if (!emailRegex.test(emailValue)) {\r\n      isEmailValid = false\r\n      displayError(email, 'Enter a valid email address.');\r\n    }\r\n  }\r\n\r\n  // Password\r\n  if (password) {\r\n    const passwordInput = document.querySelector(`#${password}`)\r\n    const passwordValue = passwordInput.value\r\n\r\n    if (passwordValue.length < 8) {\r\n      isPasswordValid = false\r\n      displayError(password, 'Password must be at least 8 characters long.');\r\n    } else if (!/[A-Z]/.test(passwordValue)) {\r\n      isPasswordValid = false\r\n      displayError(password, 'Password must contain at least one uppercase letter.');\r\n    } else if (!/\\d/.test(passwordValue)) {\r\n      isPasswordValid = false\r\n      displayError(password, 'Password must contain at least one digit.');\r\n    } else if (!/[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\-]/.test(passwordValue)) {\r\n      isPasswordValid = false\r\n      displayError(password, 'Password must contain at least one special character.');\r\n    }\r\n  }\r\n\r\n  // Confirm password\r\n  if (confirm) {\r\n    const confirmInput = document.querySelector(`#${confirm}`)\r\n    const confirmValue = confirmInput.value\r\n\r\n    const passwordInput = document.querySelector('#password');\r\n    const passwordValue = passwordInput.value\r\n\r\n    if (confirmValue !== passwordValue) {\r\n      isConfirmValid = false\r\n      displayError(confirm, 'Confirmation must match the password.');\r\n    }\r\n  }\r\n\r\n  // Rodo checkbox\r\n  if (rodo) {\r\n    const rodoCheckbox = document.querySelector(`#${rodo}`)\r\n    const rodoValue = rodoCheckbox.checked\r\n\r\n    if (!rodoValue) {\r\n      isRodoValid = false\r\n      displayError(rodo, 'Rodo is not checked.');\r\n    }\r\n  }\r\n\r\n  return isNameValid && isEmailValid && isPasswordValid && isConfirmValid && isRodoValid\r\n}\r\n\r\nfunction displayError(inputId, message) {\r\n  const errorContainer = document.querySelector(`#${inputId}-error`);\r\n  errorContainer.textContent = message;\r\n}\r\n\r\nfunction clearAllErrors() {\r\n  const errorContainers = document.querySelectorAll('.error');\r\n  errorContainers.forEach(container => {\r\n    container.textContent = '';\r\n  });\r\n}"],"names":["$13c19e183e4c0e34$var$displayError","inputId","message","errorContainer","document","querySelector","textContent","$e73bf42412feb220$var$submitButton","addEventListener","inputIds","name","email","password","confirm","rodo","errorContainers","querySelectorAll","forEach","container","isNameValid","isEmailValid","isPasswordValid","isConfirmValid","isRodoValid","nameValue","nameInput","value","length","test","emailValue","emailInput","emailRegex","passwordValue","passwordInput","confirmValue","confirmInput","rodoCheckbox","checked","formData","FormData","append","getElementById","fetch","method","body","then","response","ok","Error","json","data","console","log","catch","error"],"version":3,"file":"index.090ab72a.js.map"}